import java.util.*;

class Solution {
    public int solution(int n, int[][] computers) {
        /*
        computers: [[1, 1, 0], [1, 1, 0], [0, 0, 1]]
        => [0, 1], [2] -> 2개의 네트워크
        computers: [[1, 1, 0], [1, 1, 1], [0, 1, 1]]
        => [0, 1, 2] -> 1개의 네트워크
        */
        
        boolean[] visited = new boolean[n];
        int networkCount = 0;
        
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(i, computers, visited);
                networkCount++;
            }
        }
        
        return networkCount;
    }
    
    private void dfs(int node, int[][] computers, boolean[] visited) {
        visited[node] = true;
        
        for (int i = 0; i < computers.length; i++) {
            if (i != node && computers[node][i] == 1 && !visited[i]) {
                dfs(i, computers, visited);
            }
        }
    }
}
