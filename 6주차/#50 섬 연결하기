import java.util.Arrays;

class Solution {
    public int solution(int n, int[][] costs) {
        int answer = 0;
        
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i; //=> [0, 1, 2, 3]
        }
        
        Arrays.sort(costs, (a, b) -> Integer.compare(a[2], b[2]));
        
        /*
		    n = 4;
		    costs = [ [0,1,1],[0,2,2],[1,2,5],[1,3,1],[2,3,8] ]
	  
			  parent = [0, 1, 2, 3]
		    Arrays.sort => costs = [ [0,1,1],[1,3,1],[0,2,2],[1,2,5],[2,3,8] ] 
		    */
       
        int usedBridges = 0;
        
        for (int[] cost : costs) {
            int from = cost[0];
            int to = cost[1];
            int bridgeCost = cost[2];
            
            /*
            
            */
           
            // 두 섬이 같은 네트워크에 없다면 연결
            if (find(parent, from) != find(parent, to)) {
                union(parent, from, to);   // 두 섬을 같은 그룹으로 합치고
                answer += bridgeCost;      // 비용 더하고
                usedBridges++;             // 연결한 다리 수 증가

                // 모든 섬이 하나로 연결되었으면 종료
                if (usedBridges == n - 1) break;
            }
        }
        
        return answer;
    }
    
    private int find(int[] parent, int x) {
        if(parent[x] == x) {
	        return x;
	      } 
        return parent[x] = find(parent, parent[x]);
    }
   
    private void union(int[] parent, int a, int b) {
        int rootA = find(parent, a);
        int rootB = find(parent, b);
        if (rootA != rootB) {
            parent[rootB] = rootA;
        }
    }
}
