class Solution {
    public String solution(String p) {
         
        // 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
        if (p.isEmpty()) return "";

        // 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리
        int count = 0;
        int index = 0;
        for (; index < p.length(); index++) {
            if (p.charAt(index) == '(') count++;
            else count--;

            if (count == 0) break;
        }
        String u = p.substring(0, index + 1);
        String v = p.substring(index + 1);

        // 3. u가 "올바른 괄호 문자열"이라면 v에 대해 재귀 수행
        if (isValid(u)) {
            return u + solution(v);
        } else {
            // 4. u가 올바른 괄호 문자열이 아니라면 아래 수행
            StringBuilder sb = new StringBuilder();
            sb.append("(");
            sb.append(solution(v));
            sb.append(")");
            // u의 앞뒤 제거하고 나머지 괄호 방향 뒤집기
            for (int i = 1; i < u.length() - 1; i++) {
                if (u.charAt(i) == '(') sb.append(')');
                else sb.append('(');
            }
            return sb.toString();
        }
    }

    // "올바른 괄호 문자열"인지 판단하는 메서드
    private boolean isValid(String s) {
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') count++;
            else count--;

            if (count < 0) return false; // ')'가 먼저 나오면 올바르지 않음
        }
        return count == 0;
    }
}
