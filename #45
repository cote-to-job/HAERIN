import java.util.*;

class Solution {
    public int solution(int n, int[][] edge) {
        
        // 그래프 만들기
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] e : edge) {
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }

        // BFS 설정
        Queue<Integer> queue = new LinkedList<>();
        int[] distance = new int[n + 1];  
        Arrays.fill(distance, -1);  
        distance[1] = 0;  
        queue.add(1);  

        // BFS 실행
        while (!queue.isEmpty()) {
            int now = queue.poll();
            for (int next : graph.get(now)) {
                if (distance[next] == -1) {  
                    distance[next] = distance[now] + 1;  
                    queue.add(next);  
                }
            }
        }

        // 가장 먼 거리 찾기
        int maxDist = Arrays.stream(distance).max().getAsInt();
        int count = 0;
        for (int d : distance) {
            if (d == maxDist) count++;
        }

        return count;
    }
}
