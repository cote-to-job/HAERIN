import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;


class Solution {
    public int[] solution(String[] gems) {
        /*
        {DIA, RUBY, RUBY, DIA, DIA, EMERALD, SAPPHIRE, DIA}
        => 3번부터 7번까지 5개의 보석을 구매하면 모든 종류의 보석을 적어도 하나 이상씩 포함
        => 모든 보석을 하나 이상 포함하는 가장 짧은 구간을 찾아서 return
        => 시작 진열대 번호와 끝 진열대 번호를 차례대로 배열에 담아서 return
        => 만약 가장 짧은 구간이 여러 개라면 시작 진열대 번호가 가장 작은 구간을 return
        */
        
        Set<String> gemTypes = new HashSet<>(Arrays.asList(gems));
        int countTypes = gemTypes.size();
        
        Map<String, Integer> map = new HashMap<>(); // 현재 구간의 보석 종류 카운트
        int start = 0, end = 0;
        int minLength = Integer.MAX_VALUE;
        int answerStart = 0, answerEnd = 0;

        while (end < gems.length) {
            // 오른쪽 보석 하나 추가
            map.put(gems[end], map.getOrDefault(gems[end], 0) + 1);
            end++;

            // 모든 종류가 다 들어왔으면 왼쪽 포인터 줄여보기
            while (map.size() == countTypes) {
                if (end - start < minLength) {
                    minLength = end - start;
                    answerStart = start + 1; // 문제 조건: 1부터 시작하는 인덱스
                    answerEnd = end;
                }

                // 왼쪽 보석 하나 제거
                map.put(gems[start], map.get(gems[start]) - 1);
                if (map.get(gems[start]) == 0) {
                    map.remove(gems[start]);
                }
                start++;
            }
        }

        return new int[]{answerStart, answerEnd};
        
        
        
    }
}
