import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;


class Solution {
    
    public static class Node {
        int x;
        int y;
        int idx;
        Node left;
        Node right;
        
        Node(int x, int y, int idx) {
            this.x = x;
            this.y = y;
            this.idx = idx;
        }
    }
    
    List<Integer> preorderList = new ArrayList<>();
    List<Integer> postorderList = new ArrayList<>();
    
    public int[][] solution(int[][] nodeinfo) {
        
        int n = nodeinfo.length;
        Node[] nodes = new Node[n];
        
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node(nodeinfo[i][0], nodeinfo[i][1], i + 1); // 노드 번호가 1부터 시작하기 때문에 i + 1
        }
        
        // 노드 정렬
        Arrays.sort(nodes, (a, b) -> {
            if (b.y == a.y) return a.x - b.x;
            return b.y - a.y;
        });
        
        Node root = nodes[0];
        for (int i = 1; i < n; i++) {
            insert(root, nodes[i]);
        }
        
        preorder(root);
        postorder(root);
        
        int[][] answer = new int[2][n];
        for (int i = 0; i < n; i++) {
            answer[0][i] = preorderList.get(i);
            answer[1][i] = postorderList.get(i);
        }
        return answer;
            
    }
    
    private void insert(Node parent, Node child) {
        
        if (child.x < parent.x) {
            if (parent.left == null) {
                parent.left = child;
            } else {
                insert(parent.left, child);
            }
        } else {
            if (parent.right == null) {
                parent.right = child;
            } else {
                insert(parent.right, child);
            }
        }
    }
    
    private void preorder(Node node) {
        if (node != null) {
            preorderList.add(node.idx);
            preorder(node.left);
            preorder(node.right);
        }
    }
    
    private void postorder(Node node) {
        if (node != null) {
            postorder(node.left);
            postorder(node.right);
            postorderList.add(node.idx);
        }
    }
}
