import java.util.Arrays;
import java.util.PriorityQueue;


class Solution {
    public int solution(int[][] jobs) {
        // 요청 시각 기준 정렬
        Arrays.sort(jobs, (a, b) -> a[0] - b[0]);

        // 작업을 소요시간 기준으로 처리하는 우선순위 큐
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);

        int time = 0; // 현재 시간
        int i = 0;    // jobs 배열 인덱스
        int totalTurnaround = 0;
        int count = jobs.length;

        while (i < count || !pq.isEmpty()) {
            // 현재 시간까지 요청된 작업들을 큐에 추가
            while (i < count && jobs[i][0] <= time) {
                pq.offer(jobs[i]);
                i++;
            }

            if (!pq.isEmpty()) {
                int[] job = pq.poll();
                time += job[1]; // 작업 소요 시간만큼 현재 시간 증가
                totalTurnaround += time - job[0]; // (종료시간 - 요청시간)
            } else {
                // 큐가 비어있다면 다음 작업까지 시간 점프
                time = jobs[i][0];
            }
        }

        return totalTurnaround / count; // 평균 반응 시간
    }
}
