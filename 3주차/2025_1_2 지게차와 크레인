class Solution {
    public int solution(String[] storage, String[] requests) {
        int rows = storage.length;
        int cols = storage[0].length();
        char[][] warehouse = new char[rows][cols];

        // storage 문자열 배열을 2차원 char 배열로 변환
        for (int i = 0; i < rows; i++) {
            warehouse[i] = storage[i].toCharArray();
        }

        // 출고 요청 처리
        for (String request : requests) {
            if (request.length() == 1) {
                // 지게차 사용 (외부 접근 가능한 컨테이너만 제거)
                removeAccessibleContainers(warehouse, request.charAt(0));
            } else if (request.length() == 2) {
                // 크레인 사용 (모든 해당 컨테이너 제거)
                removeAllContainers(warehouse, request.charAt(0));
            }
        }

        // 남아있는 컨테이너 개수 계산
        return countRemainingContainers(warehouse);
    }

    // 외부 접근 가능한 컨테이너만 제거하는 함수
    private void removeAccessibleContainers(char[][] warehouse, char target) {
        int rows = warehouse.length;
        int cols = warehouse[0].length;

        boolean[][] toRemove = new boolean[rows][cols];

        // 외부에 접한 컨테이너 찾기
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (warehouse[i][j] == target && isAccessible(warehouse, i, j)) {
                    toRemove[i][j] = true;
                }
            }
        }

        // 찾은 컨테이너 제거
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (toRemove[i][j]) {
                    warehouse[i][j] = '.';
                }
            }
        }
    }

    // 특정 종류의 모든 컨테이너 제거하는 함수 (크레인 사용)
    private void removeAllContainers(char[][] warehouse, char target) {
        int rows = warehouse.length;
        int cols = warehouse[0].length;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (warehouse[i][j] == target) {
                    warehouse[i][j] = '.';
                }
            }
        }
    }

    // 외부 접근 가능 여부를 판단하는 함수
    private boolean isAccessible(char[][] warehouse, int i, int j) {
        int rows = warehouse.length;
        int cols = warehouse[0].length;

        // 창고의 외벽에 붙어 있거나, 인접한 곳이 비어 있으면 접근 가능
        return (i == 0 || i == rows - 1 || j == 0 || j == cols - 1 ||
                (i > 0 && warehouse[i - 1][j] == '.') ||
                (i < rows - 1 && warehouse[i + 1][j] == '.') ||
                (j > 0 && warehouse[i][j - 1] == '.') ||
                (j < cols - 1 && warehouse[i][j + 1] == '.'));
    }

    // 남은 컨테이너 개수 계산
    private int countRemainingContainers(char[][] warehouse) {
        int count = 0;
        for (char[] row : warehouse) {
            for (char c : row) {
                if (c != '.') {
                    count++;
                }
            }
        }
        return count;
    }
}
