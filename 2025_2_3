import java.util.Arrays;

class Solution {
    public int solution(int[][] info, int n, int m) {
        int len = info.length;
        int MAX = 121;

        // dp[i][a] = i번째 물건까지 훔친 상태에서 A 도둑의 흔적이 a일 때 B 도둑의 최소 흔적
        int[][] dp = new int[len + 1][MAX];
        for (int[] row : dp) Arrays.fill(row, MAX);
        dp[0][0] = 0; // 초기 상태: 아무것도 훔치지 않음

        for (int i = 0; i < len; i++) {
            int aTrace = info[i][0];
            int bTrace = info[i][1];

            for (int a = 0; a < MAX; a++) {
                if (dp[i][a] == MAX) continue; // 불가능한 상태

                int b = dp[i][a];

                // 1. A도둑이 i번째 물건을 훔친다
                if (a + aTrace < MAX) {
                    dp[i + 1][a + aTrace] = Math.min(dp[i + 1][a + aTrace], b);
                }

                // 2. B도둑이 i번째 물건을 훔친다
                if (b + bTrace < MAX) {
                    dp[i + 1][a] = Math.min(dp[i + 1][a], b + bTrace);
                }
            }
        }

        // 마지막 단계에서 조건을 만족하는 최소 A 흔적 찾기
        int answer = MAX;
        for (int a = 0; a < n; a++) {
            if (dp[len][a] < m) {
                answer = Math.min(answer, a);
            }
        }

        return answer == MAX ? -1 : answer;
    }
}
